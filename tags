!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
<C-h>	.\config\nvim\init.vim	/^	map <C-h> <C-w>h$/;"	m
<C-j>	.\config\nvim\init.vim	/^	map <C-j> <C-w>j$/;"	m
<C-k>	.\config\nvim\init.vim	/^	map <C-k> <C-w>k$/;"	m
<C-l>	.\config\nvim\init.vim	/^	map <C-l> <C-w>l$/;"	m
<leader>b	.\config\nvim\init.vim	/^	map <leader>b :vsp<space>$BIB<CR>$/;"	m
<leader>c	.\config\nvim\init.vim	/^	map <leader>c :w! \\| !compiler <c-r>%<CR>$/;"	m
<leader>d	.\config\nvim\init.vim	/^	imap <leader>d <esc>:call ToggleDeadKeys()<CR>a$/;"	m
<leader>d	.\config\nvim\init.vim	/^	nm <leader>d :call ToggleDeadKeys()<CR>$/;"	m
<leader>f	.\config\nvim\init.vim	/^	map <leader>f :Goyo \\| set bg=light \\| set linebreak<CR>$/;"	m
<leader>i	.\config\nvim\init.vim	/^	imap <leader>i <esc>:call ToggleIPA()<CR>a$/;"	m
<leader>i	.\config\nvim\init.vim	/^	nm <leader>i :call ToggleIPA()<CR>$/;"	m
<leader>n	.\config\nvim\init.vim	/^	map <leader>n :NERDTreeToggle<CR>$/;"	m
<leader>o	.\config\nvim\init.vim	/^	map <leader>o :setlocal spell! spelllang=en_us<CR>$/;"	m
<leader>p	.\config\nvim\init.vim	/^	map <leader>p :!opout <c-r>%<CR><CR>$/;"	m
<leader>q	.\config\nvim\init.vim	/^	nm <leader>q :call ToggleProse()<CR>$/;"	m
<leader>r	.\config\nvim\init.vim	/^	map <leader>r :vsp<space>$REFER<CR>$/;"	m
<leader>s	.\config\nvim\init.vim	/^	map <leader>s :!clear && shellcheck %<CR>$/;"	m
<leader>v	.\config\nvim\init.vim	/^	map <leader>v :VimwikiIndex$/;"	m
EC	.\bash\custom\utils.sh	/^EC() { echo -e '\\e[1;33m'code $?'\\e[m\\n'; }$/;"	f
Q	.\config\nvim\init.vim	/^	map Q gq$/;"	m
S	.\config\nvim\init.vim	/^	nnoremap S :%s\/\/g<Left><Left>$/;"	m
__calcAccountKeyHash	.\bash\bin\acme.sh	/^__calcAccountKeyHash() {$/;"	f
__calc_account_thumbprint	.\bash\bin\acme.sh	/^__calc_account_thumbprint() {$/;"	f
__check_txt	.\bash\bin\acme.sh	/^__check_txt() {$/;"	f
__debug_bash_helper	.\bash\bin\acme.sh	/^__debug_bash_helper() {$/;"	f
__get_domain_new_authz	.\bash\bin\acme.sh	/^__get_domain_new_authz() {$/;"	f
__green	.\bash\bin\acme.sh	/^__green() {$/;"	f
__initHome	.\bash\bin\acme.sh	/^__initHome() {$/;"	f
__purge_txt	.\bash\bin\acme.sh	/^__purge_txt() {$/;"	f
__read_password	.\bash\bin\acme.sh	/^__read_password() {$/;"	f
__red	.\bash\bin\acme.sh	/^__red() {$/;"	f
__trigger_validation	.\bash\bin\acme.sh	/^__trigger_validation() {$/;"	f
_apachePath	.\bash\bin\acme.sh	/^_apachePath() {$/;"	f
_ascii_hex	.\bash\bin\acme.sh	/^_ascii_hex() {$/;"	f
_base64	.\bash\bin\acme.sh	/^_base64() {$/;"	f
_calcjwk	.\bash\bin\acme.sh	/^_calcjwk() {$/;"	f
_checkConf	.\bash\bin\acme.sh	/^_checkConf() {$/;"	f
_checkSudo	.\bash\bin\acme.sh	/^_checkSudo() {$/;"	f
_check_dns_entries	.\bash\bin\acme.sh	/^_check_dns_entries() {$/;"	f
_checkcert	.\bash\bin\acme.sh	/^_checkcert() {$/;"	f
_clear_conf	.\bash\bin\acme.sh	/^_clear_conf() {$/;"	f
_clearaccountconf	.\bash\bin\acme.sh	/^_clearaccountconf() {$/;"	f
_clearcaconf	.\bash\bin\acme.sh	/^_clearcaconf() {$/;"	f
_cleardomainconf	.\bash\bin\acme.sh	/^_cleardomainconf() {$/;"	f
_clearup	.\bash\bin\acme.sh	/^_clearup() {$/;"	f
_clearupdns	.\bash\bin\acme.sh	/^_clearupdns() {$/;"	f
_clearupwebbroot	.\bash\bin\acme.sh	/^_clearupwebbroot() {$/;"	f
_conapath	.\bash\bin\acme.sh	/^_conapath() {$/;"	f
_contains	.\bash\bin\acme.sh	/^_contains() {$/;"	f
_create_account_key	.\bash\bin\acme.sh	/^_create_account_key() {$/;"	f
_createcsr	.\bash\bin\acme.sh	/^_createcsr() {$/;"	f
_createkey	.\bash\bin\acme.sh	/^_createkey() {$/;"	f
_dbase64	.\bash\bin\acme.sh	/^_dbase64() {$/;"	f
_deactivate	.\bash\bin\acme.sh	/^_deactivate() {$/;"	f
_debug	.\bash\bin\acme.sh	/^_debug() {$/;"	f
_debug2	.\bash\bin\acme.sh	/^_debug2() {$/;"	f
_debug3	.\bash\bin\acme.sh	/^_debug3() {$/;"	f
_deploy	.\bash\bin\acme.sh	/^_deploy() {$/;"	f
_detect_profile	.\bash\bin\acme.sh	/^_detect_profile() {$/;"	f
_digest	.\bash\bin\acme.sh	/^_digest() {$/;"	f
_dlg_versions	.\bash\bin\acme.sh	/^_dlg_versions() {$/;"	f
_egrep_o	.\bash\bin\acme.sh	/^_egrep_o() {$/;"	f
_endswith	.\bash\bin\acme.sh	/^_endswith() {$/;"	f
_err	.\bash\bin\acme.sh	/^_err() {$/;"	f
_exec	.\bash\bin\acme.sh	/^_exec() {$/;"	f
_exec_err	.\bash\bin\acme.sh	/^_exec_err() {$/;"	f
_exists	.\bash\bin\acme.sh	/^_exists() {$/;"	f
_findHook	.\bash\bin\acme.sh	/^_findHook() {$/;"	f
_get	.\bash\bin\acme.sh	/^_get() {$/;"	f
_getRepoHash	.\bash\bin\acme.sh	/^_getRepoHash() {$/;"	f
_getUpgradeHash	.\bash\bin\acme.sh	/^_getUpgradeHash() {$/;"	f
_getdeployconf	.\bash\bin\acme.sh	/^_getdeployconf() {$/;"	f
_getfield	.\bash\bin\acme.sh	/^_getfield() {$/;"	f
_getfile	.\bash\bin\acme.sh	/^_getfile() {$/;"	f
_h2b	.\bash\bin\acme.sh	/^_h2b() {$/;"	f
_h_char_2_dec	.\bash\bin\acme.sh	/^_h_char_2_dec() {$/;"	f
_hasfield	.\bash\bin\acme.sh	/^_hasfield() {$/;"	f
_head_n	.\bash\bin\acme.sh	/^_head_n() {$/;"	f
_hex_dump	.\bash\bin\acme.sh	/^_hex_dump() {$/;"	f
_hmac	.\bash\bin\acme.sh	/^_hmac() {$/;"	f
_idn	.\bash\bin\acme.sh	/^_idn() {$/;"	f
_info	.\bash\bin\acme.sh	/^_info() {$/;"	f
_initAPI	.\bash\bin\acme.sh	/^_initAPI() {$/;"	f
_initconf	.\bash\bin\acme.sh	/^_initconf() {$/;"	f
_inithttp	.\bash\bin\acme.sh	/^_inithttp() {$/;"	f
_initpath	.\bash\bin\acme.sh	/^_initpath() {$/;"	f
_installOnline	.\bash\bin\acme.sh	/^_installOnline() {$/;"	f
_install_win_taskscheduler	.\bash\bin\acme.sh	/^_install_win_taskscheduler() {$/;"	f
_installalias	.\bash\bin\acme.sh	/^_installalias() {$/;"	f
_installcert	.\bash\bin\acme.sh	/^_installcert() {$/;"	f
_isEccKey	.\bash\bin\acme.sh	/^_isEccKey() {$/;"	f
_isRealNginxConf	.\bash\bin\acme.sh	/^_isRealNginxConf() {$/;"	f
_is_idn	.\bash\bin\acme.sh	/^_is_idn() {$/;"	f
_is_solaris	.\bash\bin\acme.sh	/^_is_solaris() {$/;"	f
_json_encode	.\bash\bin\acme.sh	/^_json_encode() {$/;"	f
_log	.\bash\bin\acme.sh	/^_log() {$/;"	f
_lower_case	.\bash\bin\acme.sh	/^_lower_case() {$/;"	f
_math	.\bash\bin\acme.sh	/^_math() {$/;"	f
_mktemp	.\bash\bin\acme.sh	/^_mktemp() {$/;"	f
_normalizeJson	.\bash\bin\acme.sh	/^_normalizeJson() {$/;"	f
_ns_is_available_cf	.\bash\bin\acme.sh	/^_ns_is_available_cf() {$/;"	f
_ns_lookup	.\bash\bin\acme.sh	/^_ns_lookup() {$/;"	f
_ns_lookup_cf	.\bash\bin\acme.sh	/^_ns_lookup_cf() {$/;"	f
_ns_lookup_google	.\bash\bin\acme.sh	/^_ns_lookup_google() {$/;"	f
_ns_lookup_impl	.\bash\bin\acme.sh	/^_ns_lookup_impl() {$/;"	f
_ns_purge_cf	.\bash\bin\acme.sh	/^_ns_purge_cf() {$/;"	f
_on_before_issue	.\bash\bin\acme.sh	/^_on_before_issue() {$/;"	f
_on_issue_err	.\bash\bin\acme.sh	/^_on_issue_err() {$/;"	f
_on_issue_success	.\bash\bin\acme.sh	/^_on_issue_success() {$/;"	f
_post	.\bash\bin\acme.sh	/^_post() {$/;"	f
_precheck	.\bash\bin\acme.sh	/^_precheck() {$/;"	f
_printargs	.\bash\bin\acme.sh	/^_printargs() {$/;"	f
_process	.\bash\bin\acme.sh	/^_process() {$/;"	f
_processAccountConf	.\bash\bin\acme.sh	/^_processAccountConf() {$/;"	f
_readKeyLengthFromCSR	.\bash\bin\acme.sh	/^_readKeyLengthFromCSR() {$/;"	f
_readSubjectAltNamesFromCSR	.\bash\bin\acme.sh	/^_readSubjectAltNamesFromCSR() {$/;"	f
_readSubjectFromCSR	.\bash\bin\acme.sh	/^_readSubjectFromCSR() {$/;"	f
_read_conf	.\bash\bin\acme.sh	/^_read_conf() {$/;"	f
_readaccountconf	.\bash\bin\acme.sh	/^_readaccountconf() {$/;"	f
_readaccountconf_mutable	.\bash\bin\acme.sh	/^_readaccountconf_mutable() {$/;"	f
_readcaconf	.\bash\bin\acme.sh	/^_readcaconf() {$/;"	f
_readdomainconf	.\bash\bin\acme.sh	/^_readdomainconf() {$/;"	f
_readlink	.\bash\bin\acme.sh	/^_readlink() {$/;"	f
_regAccount	.\bash\bin\acme.sh	/^_regAccount() {$/;"	f
_restoreApache	.\bash\bin\acme.sh	/^_restoreApache() {$/;"	f
_restoreNginx	.\bash\bin\acme.sh	/^_restoreNginx() {$/;"	f
_save_conf	.\bash\bin\acme.sh	/^_save_conf() {$/;"	f
_saveaccountconf	.\bash\bin\acme.sh	/^_saveaccountconf() {$/;"	f
_saveaccountconf_mutable	.\bash\bin\acme.sh	/^_saveaccountconf_mutable() {$/;"	f
_savecaconf	.\bash\bin\acme.sh	/^_savecaconf() {$/;"	f
_savedeployconf	.\bash\bin\acme.sh	/^_savedeployconf() {$/;"	f
_savedomainconf	.\bash\bin\acme.sh	/^_savedomainconf() {$/;"	f
_secure_debug	.\bash\bin\acme.sh	/^_secure_debug() {$/;"	f
_secure_debug2	.\bash\bin\acme.sh	/^_secure_debug2() {$/;"	f
_secure_debug3	.\bash\bin\acme.sh	/^_secure_debug3() {$/;"	f
_sed_i	.\bash\bin\acme.sh	/^_sed_i() {$/;"	f
_send_notify	.\bash\bin\acme.sh	/^_send_notify() {$/;"	f
_send_signed_request	.\bash\bin\acme.sh	/^_send_signed_request() {$/;"	f
_setApache	.\bash\bin\acme.sh	/^_setApache() {$/;"	f
_setNginx	.\bash\bin\acme.sh	/^_setNginx() {$/;"	f
_setShebang	.\bash\bin\acme.sh	/^_setShebang() {$/;"	f
_set_notify_hook	.\bash\bin\acme.sh	/^_set_notify_hook() {$/;"	f
_setopt	.\bash\bin\acme.sh	/^_setopt() {$/;"	f
_sign	.\bash\bin\acme.sh	/^_sign() {$/;"	f
_signcsr	.\bash\bin\acme.sh	/^_signcsr() {$/;"	f
_sleep	.\bash\bin\acme.sh	/^_sleep() {$/;"	f
_ss	.\bash\bin\acme.sh	/^_ss() {$/;"	f
_startserver	.\bash\bin\acme.sh	/^_startserver() {$/;"	f
_startswith	.\bash\bin\acme.sh	/^_startswith() {$/;"	f
_starttlsserver	.\bash\bin\acme.sh	/^_starttlsserver() {$/;"	f
_stat	.\bash\bin\acme.sh	/^_stat() {$/;"	f
_stopserver	.\bash\bin\acme.sh	/^_stopserver() {$/;"	f
_syslog	.\bash\bin\acme.sh	/^_syslog() {$/;"	f
_tail_n	.\bash\bin\acme.sh	/^_tail_n() {$/;"	f
_time	.\bash\bin\acme.sh	/^_time() {$/;"	f
_time2str	.\bash\bin\acme.sh	/^_time2str() {$/;"	f
_toPkcs	.\bash\bin\acme.sh	/^_toPkcs() {$/;"	f
_uninstall_win_taskscheduler	.\bash\bin\acme.sh	/^_uninstall_win_taskscheduler() {$/;"	f
_uninstallalias	.\bash\bin\acme.sh	/^_uninstallalias() {$/;"	f
_upper_case	.\bash\bin\acme.sh	/^_upper_case() {$/;"	f
_url_encode	.\bash\bin\acme.sh	/^_url_encode() {$/;"	f
_url_replace	.\bash\bin\acme.sh	/^_url_replace() {$/;"	f
_usage	.\bash\bin\acme.sh	/^_usage() {$/;"	f
_utc_date	.\bash\bin\acme.sh	/^_utc_date() {$/;"	f
abspath	.\bash\custom\utils.sh	/^abspath() {$/;"	f
adduserandpass	.\bash\bin\install-larbs.sh	/^adduserandpass() { \\$/;"	f
adduserandpass	.\install.sh	/^adduserandpass() { \\$/;"	f
ask	.\bash\custom\utils.sh	/^ask() {$/;"	f
assignProxy	.\bash\custom\utils.sh	/^assignProxy() {$/;"	f
aurinstall	.\bash\bin\install-larbs.sh	/^aurinstall() { \\$/;"	f
backup	.\bash\custom\utils.sh	/^backup() {$/;"	f
backup	.\install.sh	/^backup() {$/;"	f
bbr_boost_sh	.\bash\bin\install-trojan-onekey.sh	/^function bbr_boost_sh(){$/;"	f
blue	.\bash\bin\install-trojan-onekey.sh	/^blue(){$/;"	f
blue	.\bash\custom\utils.sh	/^blue(){$/;"	f
blue	.\bootstrap.sh	/^blue(){$/;"	f
book_str	.\config\chrome\clean_up_chrome_bookmarks.py	/^    book_str = read_file()$/;"	v
bootstrap	.\install.sh	/^bootstrap() {$/;"	f
c	.\config\nvim\init.vim	/^	nnoremap c "_c$/;"	m
calc	.\bash\custom\utils.sh	/^calc() {$/;"	f
cdf	.\bash\custom\utils.sh	/^cdf() { # short for `cdfinder`$/;"	f
cell	.\config\jupyter\.jupyter\custom\custom.js	/^var cell = Jupyter.notebook.get_selected_cell();$/;"	v
cell	.\config\jupyter\custom\custom.js	/^var cell = Jupyter.notebook.get_selected_cell();$/;"	v
check_commands	.\install.sh	/^check_commands() {$/;"	f
check_git	.\bash\custom\utils.sh	/^check_git() {$/;"	f
children_bar	.\config\chrome\clean_up_chrome_bookmarks.py	/^    children_bar = get_bookmark_total(book_str)$/;"	v
ck	.\bash\custom\utils.sh	/^ck() {  $/;"	f
cl	.\bash\custom\utils.sh	/^cl() {$/;"	f
clrProxy	.\bash\custom\utils.sh	/^clrProxy() {$/;"	f
codepoint	.\bash\custom\utils.sh	/^codepoint() {$/;"	f
config	.\config\jupyter\.jupyter\custom\custom.js	/^var config = cell.config;$/;"	v
config	.\config\jupyter\custom\custom.js	/^var config = cell.config;$/;"	v
config_app	.\bootstrap.sh	/^function config_app(){$/;"	f
config_network	.\bootstrap.sh	/^function config_network(){$/;"	f
config_shadowsocks	.\bash\bin\install-sss.sh	/^function config_shadowsocks(){$/;"	f
createAccountKey	.\bash\bin\acme.sh	/^createAccountKey() {$/;"	f
createCSR	.\bash\bin\acme.sh	/^createCSR() {$/;"	f
createDomainKey	.\bash\bin\acme.sh	/^createDomainKey() {$/;"	f
cron	.\bash\bin\acme.sh	/^cron() {$/;"	f
csource	.\bash\custom\utils.sh	/^csource() {$/;"	f
dataurl	.\bash\custom\utils.sh	/^dataurl() {$/;"	f
deactivate	.\bash\bin\acme.sh	/^deactivate() {$/;"	f
deactivateaccount	.\bash\bin\acme.sh	/^deactivateaccount() {$/;"	f
dec2bin	.\bash\custom\utils.sh	/^dec2bin(){$/;"	f
deploy	.\bash\bin\acme.sh	/^deploy() {$/;"	f
deploy	.\bash\custom\utils.sh	/^deploy() {$/;"	f
disable_selinux	.\bash\bin\install-sss.sh	/^function disable_selinux(){$/;"	f
dk	.\bash\custom\utils.sh	/^dk() {$/;"	f
docview	.\bash\custom\utils.sh	/^docview() {$/;"	f
download_files	.\bash\bin\install-sss.sh	/^function download_files(){$/;"	f
error	.\bash\bin\install-larbs.sh	/^error() { clear; printf "ERROR:\\\\n%s\\\\n" "$1"; exit;}$/;"	f
error	.\bash\custom\utils.sh	/^error() {$/;"	f
error	.\install.sh	/^error() {$/;"	f
escape	.\bash\custom\utils.sh	/^escape() {$/;"	f
exists	.\bash\custom\utils.sh	/^exists() {$/;"	f
exists	.\install.sh	/^exists() {$/;"	f
extract	.\bash\custom\utils.sh	/^extract() {$/;"	f
finalize	.\bash\bin\install-larbs.sh	/^finalize(){ \\$/;"	f
finalize	.\install.sh	/^finalize(){ \\$/;"	f
fix	.\bash\custom\utils.sh	/^fix() {  $/;"	f
fs	.\bash\custom\utils.sh	/^fs() {$/;"	f
g:vimwiki_ext2syntax	.\config\nvim\init.vim	/^	let g:vimwiki_ext2syntax = {'.Rmd': 'markdown', '.rmd': 'markdown','.md': 'markdown', '.markdown': 'markdown', '.mdown': 'markdown'}$/;"	v
g:vimwiki_list	.\config\nvim\init.vim	/^	let g:vimwiki_list = [{'path': '~\/vimwiki', 'syntax': 'markdown', 'ext': '.md'}]$/;"	v
get_bookmark_total	.\config\chrome\clean_up_chrome_bookmarks.py	/^def get_bookmark_total(bookstr):$/;"	f
get_char	.\bash\bin\install-sss.sh	/^    get_char(){$/;"	f
get_detail	.\config\chrome\clean_up_chrome_bookmarks.py	/^def get_detail(children: list, name, index):$/;"	f
get_subbin	.\bash\custom\path.sh	/^get_subbin() {$/;"	f
getcertnames	.\bash\custom\utils.sh	/^getcertnames() {$/;"	f
getuserandpass	.\bash\bin\install-larbs.sh	/^getuserandpass() { \\$/;"	f
getuserandpass	.\install.sh	/^getuserandpass() { \\$/;"	f
gitio	.\bash\custom\utils.sh	/^gitio() {$/;"	f
gitmakeinstall	.\bash\bin\install-larbs.sh	/^gitmakeinstall() {$/;"	f
gnudate	.\bash\custom\utils.sh	/^gnudate() {$/;"	f
green	.\bash\bin\install-trojan-onekey.sh	/^green(){$/;"	f
green	.\bash\custom\utils.sh	/^green(){$/;"	f
green	.\bootstrap.sh	/^green(){$/;"	f
gz	.\bash\custom\utils.sh	/^gz() {$/;"	f
help	.\install.sh	/^help() {$/;"	f
install	.\bash\bin\acme.sh	/^install() {$/;"	f
install	.\bash\bin\install-sss.sh	/^function install(){$/;"	f
install	.\install.sh	/^install() {$/;"	f
install_bash	.\bootstrap.sh	/^function install_bash(){$/;"	f
install_caddy	.\bootstrap.sh	/^function install_caddy(){$/;"	f
install_doom_emacs	.\bash\bin\emacs.sh	/^install_doom_emacs() {$/;"	f
install_doom_private	.\bash\bin\emacs.sh	/^install_doom_private() {$/;"	f
install_emacs	.\bootstrap.sh	/^function install_emacs(){$/;"	f
install_nvm	.\bootstrap.sh	/^function install_nvm(){$/;"	f
install_python	.\bootstrap.sh	/^function install_python(){$/;"	f
install_shadowsocks_libev	.\bash\bin\install-sss.sh	/^function install_shadowsocks_libev(){$/;"	f
install_tmux	.\bootstrap.sh	/^function install_tmux(){$/;"	f
install_trojan	.\bash\bin\install-trojan-onekey.sh	/^function install_trojan(){$/;"	f
install_trojan	.\bootstrap.sh	/^function install_trojan(){$/;"	f
install_v2ray	.\bootstrap.sh	/^function install_v2ray(){$/;"	f
install_vim	.\bootstrap.sh	/^function install_vim(){$/;"	f
installationloop	.\bash\bin\install-larbs.sh	/^installationloop() { \\$/;"	f
installationloop	.\install.sh	/^installationloop() { \\$/;"	f
installcert	.\bash\bin\acme.sh	/^installcert() {$/;"	f
installcronjob	.\bash\bin\acme.sh	/^installcronjob() {$/;"	f
installpkg	.\bash\bin\install-larbs.sh	/^	installpkg(){ apk add -y "$1" >\/dev\/null 2>&1 ;}$/;"	f
installpkg	.\bash\bin\install-larbs.sh	/^	installpkg(){ apt-get install -y "$1" >\/dev\/null 2>&1 ;}$/;"	f
installpkg	.\bash\bin\install-larbs.sh	/^	installpkg(){ pacman --noconfirm --needed -S "$1" >\/dev\/null 2>&1 ;}$/;"	f
installpkg	.\bash\bin\install-larbs.sh	/^	installpkg(){ xbps-install -y "$1" >\/dev\/null 2>&1 ;}$/;"	f
installpkg	.\install.sh	/^	installpkg(){ apk add -y "$1" >\/dev\/null 2>&1 ;}$/;"	f
installpkg	.\install.sh	/^	installpkg(){ apt-get install -y "$1" >\/dev\/null 2>&1 ;}$/;"	f
installpkg	.\install.sh	/^	installpkg(){ pacman --noconfirm --needed -S "$1" >\/dev\/null 2>&1 ;}$/;"	f
installpkg	.\install.sh	/^	installpkg(){ xbps-install -y "$1" >\/dev\/null 2>&1 ;}$/;"	f
is_bookmarks_active	.\config\chrome\clean_up_chrome_bookmarks.py	/^def is_bookmarks_active():$/;"	f
is_url_ok	.\config\chrome\clean_up_chrome_bookmarks.py	/^def is_url_ok(url):$/;"	f
issue	.\bash\bin\acme.sh	/^issue() {$/;"	f
json	.\config\chrome\clean_up_chrome_bookmarks.py	/^import json$/;"	i
list	.\bash\bin\acme.sh	/^list() {$/;"	f
load_bash_it	.\bash\custom\extra.sh	/^load_bash_it() {$/;"	f
load_one	.\bash\custom\extra.sh	/^load_one() {$/;"	f
main	.\bash\bin\acme.sh	/^main() {$/;"	f
maininstall	.\bash\bin\install-larbs.sh	/^maininstall() { # Installs all needed programs from main repo.$/;"	f
maininstall	.\install.sh	/^maininstall() { # Installs all needed programs from main repo.$/;"	f
manualinstall	.\bash\bin\install-larbs.sh	/^manualinstall() { # Installs $1 manually if not installed. $/;"	f
manualinstall	.\install.sh	/^manualinstall() { # Installs $1 manually if not installed. $/;"	f
mapleader	.\config\nvim\init.vim	/^let mapleader =","$/;"	v
mcd	.\bash\custom\utils.sh	/^mcd() {  $/;"	f
mfaProxy	.\bash\custom\utils.sh	/^mfaProxy() {$/;"	f
mkd	.\bash\custom\utils.sh	/^mkd() {$/;"	f
mktar	.\bash\custom\utils.sh	/^mktar(){ tar cvf  "${1%%\/}.tar"     "${1%%\/}\/"; }  $/;"	f
mktbz	.\bash\custom\utils.sh	/^mktbz(){ tar cvjf "${1%%\/}.tar.bz2" "${1%%\/}\/"; }$/;"	f
mktgz	.\bash\custom\utils.sh	/^mktgz(){ tar cvzf "${1%%\/}.tar.gz"  "${1%%\/}\/"; }  $/;"	f
mktgz2	.\bash\custom\utils.sh	/^mktgz2() {$/;"	f
msg	.\bash\custom\utils.sh	/^msg() {$/;"	f
msg	.\install.sh	/^msg() {$/;"	f
newperms	.\bash\bin\install-larbs.sh	/^newperms() { # Set special sudoers settings for install (or after).$/;"	f
note	.\bash\custom\utils.sh	/^note () {$/;"	f
os	.\config\chrome\clean_up_chrome_bookmarks.py	/^import os$/;"	i
params	.\bash\custom\utils.sh	/^params() {$/;"	f
patch.CodeCell	.\config\jupyter\.jupyter\custom\custom.js	/^      CodeCell:{$/;"	p
patch.CodeCell	.\config\jupyter\custom\custom.js	/^      CodeCell:{$/;"	p
phpserver	.\bash\custom\utils.sh	/^phpserver() {$/;"	f
pipinstall	.\bash\bin\install-larbs.sh	/^pipinstall() { \\$/;"	f
pipinstall	.\install.sh	/^pipinstall() { \\$/;"	f
pre_install	.\bash\bin\install-sss.sh	/^function pre_install(){$/;"	f
preinstallmsg	.\bash\bin\install-larbs.sh	/^preinstallmsg() { \\$/;"	f
preinstallmsg	.\install.sh	/^preinstallmsg() { \\$/;"	f
print_complex_url	.\config\chrome\clean_up_chrome_bookmarks.py	/^def print_complex_url(index, direct, name, url):$/;"	f
putgitrepo	.\bash\bin\install-larbs.sh	/^putgitrepo() { # Downloads a gitrepo $1 and places the files in $2 only overwriting conflicts$/;"	f
read_file	.\config\chrome\clean_up_chrome_bookmarks.py	/^def read_file():$/;"	f
red	.\bash\bin\install-trojan-onekey.sh	/^red(){$/;"	f
red	.\bash\custom\utils.sh	/^red(){$/;"	f
red	.\bootstrap.sh	/^red(){$/;"	f
refreshkeys	.\bash\bin\install-larbs.sh	/^refreshkeys() { \\$/;"	f
registeraccount	.\bash\bin\acme.sh	/^registeraccount() {$/;"	f
remove	.\bash\bin\acme.sh	/^remove() {$/;"	f
remove	.\install.sh	/^remove() {$/;"	f
remove_trojan	.\bash\bin\install-trojan-onekey.sh	/^function remove_trojan(){$/;"	f
renew	.\bash\bin\acme.sh	/^renew() {$/;"	f
renewAll	.\bash\bin\acme.sh	/^renewAll() {$/;"	f
repair_cert	.\bash\bin\install-trojan-onekey.sh	/^function repair_cert(){$/;"	f
requests	.\config\chrome\clean_up_chrome_bookmarks.py	/^import requests$/;"	i
revoke	.\bash\bin\acme.sh	/^revoke() {$/;"	f
rootness	.\bash\bin\install-sss.sh	/^function rootness(){$/;"	f
search	.\bash\custom\utils.sh	/^search() {$/;"	f
selectdotfiles	.\bash\bin\install-larbs.sh	/^selectdotfiles() { \\$/;"	f
selectmenu	.\bash\custom\utils.sh	/^selectmenu() {$/;"	f
server	.\bash\custom\utils.sh	/^server() {$/;"	f
setnotify	.\bash\bin\acme.sh	/^setnotify() {$/;"	f
showcsr	.\bash\bin\acme.sh	/^showcsr() {$/;"	f
showhelp	.\bash\bin\acme.sh	/^showhelp() {$/;"	f
signcsr	.\bash\bin\acme.sh	/^signcsr() {$/;"	f
start_menu	.\bash\bin\install-trojan-onekey.sh	/^start_menu(){$/;"	f
start_menu	.\bootstrap.sh	/^start_menu(){$/;"	f
success	.\bash\custom\utils.sh	/^success() {$/;"	f
success	.\install.sh	/^success() {$/;"	f
sync_repo	.\install.sh	/^sync_repo() {$/;"	f
systembeepoff	.\bash\bin\install-larbs.sh	/^systembeepoff() { dialog --infobox "Getting rid of that retarded error beep sound..." 10 50$/;"	f
toPkcs	.\bash\bin\acme.sh	/^toPkcs() {$/;"	f
toPkcs8	.\bash\bin\acme.sh	/^toPkcs8() {$/;"	f
todo	.\bash\custom\utils.sh	/^todo() {$/;"	f
total_fav	.\config\chrome\clean_up_chrome_bookmarks.py	/^total_fav = dict()$/;"	v
touchexe	.\bash\custom\utils.sh	/^touchexe() {$/;"	f
tre	.\bash\custom\utils.sh	/^tre() {$/;"	f
unidecode	.\bash\custom\utils.sh	/^unidecode() {$/;"	f
uninstall	.\bash\bin\acme.sh	/^uninstall() {$/;"	f
uninstall_shadowsocks_libev	.\bash\bin\install-sss.sh	/^function uninstall_shadowsocks_libev(){$/;"	f
uninstallcronjob	.\bash\bin\acme.sh	/^uninstallcronjob() {$/;"	f
updateaccount	.\bash\bin\acme.sh	/^updateaccount() {$/;"	f
upgrade	.\bash\bin\acme.sh	/^upgrade() {$/;"	f
usercheck	.\bash\bin\install-larbs.sh	/^usercheck() { \\$/;"	f
usercheck	.\install.sh	/^usercheck() { \\$/;"	f
version	.\bash\bin\acme.sh	/^version() {$/;"	f
w!!	.\config\nvim\init.vim	/^	cnoremap w!! execute 'silent! write !sudo tee % >\/dev\/null' <bar> edit!$/;"	m
welcomemsg	.\bash\bin\install-larbs.sh	/^welcomemsg() { \\$/;"	f
welcomemsg	.\install.sh	/^welcomemsg() { \\$/;"	f
