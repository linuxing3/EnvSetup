#+SETUPFILE:./hugo_setup.org
#+HUGO_SECTION: zettels
#+HUGO_SLUG: virtualization
#+TITLE: Virtualization

Go back to inbox: [[file:2020-03-02.org][Other Brain Inbox]]

* Virtualbox

** Vagrant
[[file:/vagrant/Vagrantfile][Vagrantfile with nodejs and emacs]]
[[file:/vagrant/sh/][Provision with shell]]
[[file:/vagrant/ansible/][Provision with ansible]]

+ Be careful, don't halt your virtual machine within the virtualbox application, which may cause infinite reboot of your system

Always use the =vagrant halt= to gracefully shutdown the system.

*** Making Snapshots

#+BEGIN_SRC shell
vagrant snapshot list
vagrant snapshot save mysnapshot
vagrant ssh-config
vagrant up
vagrant halt
#+BEGIN_SRC


How to recover the shared_folders in vagrant after update the linux kernel

[[https://stackoverflow.com/questions/27992354/vagrant-error-failed-to-mount-folders-in-linux-guest-after-halt-or-reload][update kernel will cause error]]

*** Updating the plugin to detect any plugin error

+ Just open your cmd or powershell or mitty to install vagrant guest tools

#+BEGIN_SRC shell
vagrant plugin install vbguest
#+BEGIN_SRC

*** Updating the kernel and reload vboxguest modules

+ Login your vagrant vm and run the following command

#+BEGIN_SRC shell
sudo apt install -y linux-headers-4.19.0-8-686-pae
sudo /sbin/rcvboxadd setup
sudo /sbin/rcvboxadd quicksetup all
sudo /sbin/rcvboxadd quicksetup 4.19.0-8-686-pae
#+END_SRC

+ Restart the system to get ready for vboxguest working with new kernel

#+BEGIN_SRC shell
vagrant halt
vagrant up
#+BEGIN_SRC

* VPS

** Setting google cloud vps

+ first register your google cloud account

+ run the =trojan= install script

+ change password of root

#+BEGIN_SRC shell
# Enter root
sudo -i
#+END_SRC

+ install packages

#+BEGIN_SRC shell
apt update && apt upgrade
apt install -y common-properties build-esentials
#+END_SRC

** Setting domain and use CDN

Visit tencent cloud to register domain name https://cloud.tencent.com/

- add A record to ip address
  change DNS to cloudflare dns
  Add MX record to email domain

Visit cloudflare to use a CDN https://dash.cloudflare.com/

Cloudflare 名称服务器
要使用 Cloudflare，请 [更改名称服务器]
(https://support.cloudflare.com/hc/articles/205195708)或权威
DNS 服务器。这些服务器是分配的 Cloudflare 名称服务器。

~daniella.ns.cloudflare.com~
~sage.ns.cloudflare.com~

*** Setting ssh client config
Setting you ssh like this

Read more about SSH config files: https://linux.die.net/man/5/ssh_config

My key file [[file:d:/Dropbox/config/ssh/][My ssh files]]

#+BEGIN_SRC info
Host xunqinji
    HostName xunqinji.top
    User root
    Port 22
Host dongxishijie
    HostName dongxishijie.xyz
    User root
    Port 22
Host dxsjv
    HostName dongxishijie.xyz
    User vagrant
    Port 22
Host huawei
    HostName 192.168.1.189
    User root
    Port 22
Host xiaomi
    HostName 192.168.1.1
    User vagrant
    Port 22
Host home
    HostName 186.90.238.153
    User vagrant
    Port 8022

#+END_SRC

** Install proxy server on VPS

[[http://souclou.com/?p=23403][最新最简单最快速使用VULTR VPS搭建高速TROJAN翻墙方式]]
[[https://iyideng.com/truth/cgfw/self-built-trojan-server-tutorial-vultr.html][『VPS搭建Trojan教程』使用Vultr搭建Trojan服务器，部署BBR+锐速加速科学上网！]]
[[http://luyiminggonnabeok.cn/2019/12/07/%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC%E6%90%AD%E5%BB%BATrojan%E6%A2%AF%E5%AD%90%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/][一键脚本搭建科学上网Trojan梯子(自建VPN)详细教程]]
[[http://luyiminggonnabeok.cn/2018/08/10/%E5%8D%81%E5%88%86%E9%92%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84SSR%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%A2%AF%E5%AD%90/][十分钟搭建自己的科学上网SSR梯子（自建VPN）]]
[[https://www.youtube.com/watch?v=7ewqVuRXpto][零成本体验一下免费的软路由]]
[[https://mtom.ml/798.html][不求人GitHub Actions 云menuconfig自定义配置编译OpenWrt PassWall固件]]

** Cloud compile openwrt firmware

感谢P3TERX/Actions-OpenWrt和Lienol/openwrt

本文介绍GitHub Actions在线自定义编译 OpenWrt 包含PassWall服务固件的过程，可以选择Lienol OpenWrt的不同分支源码。

首先你要有GitHub账号，基本的GitHub使用能力，知道Actions添加workflows；知道自己路由器的硬件配置；查询openwrt是否适合你的路由器，了解openwrt编译步骤；什么都不知道就先学习了再往下看👀吧！

1、登陆你的GitHub账号，搜索Lancenas/actions-openwrt-passwall


#+CAPTION: This is the caption for the next figure link (or table)
#+NAME:   fig:fork git repository
[[https://mtom.ml/wordpress/wp-content/uploads/2020/02/Xnip2020-02-17_11-44-26-1.webp][fork git repository]]

打开Lancenas/actions-openwrt-passwall 点击右上fork


fork可以自定义名称

按图示说明编辑流程文件，另外可以修改REPO_URL: 不同库地址；
REPO_BRANCH: 不同分支
LienolOpenWrt源码为例
- [] 分支dev-master 激进；
- [] dev-19.07 OpenWrt官方平稳版；
- [] dev-lean-lede lean的源码）

图示以点击“star”触发编译为例，修改后保存，退出编辑。

在你的账号下，后面所有步骤都是在你的账号下操作，点击右上star

这时已经开始编译了，点击Actions查看工作流程


#+BEGIN_SRC yaml
name: Build OpenWrt

on:
  release:
    types: [published]
  push:
    branches:
      - master
#    paths:
#      - '.config'
#  schedule:
#    - cron: 0 8 * * 5
#  watch:
#    types: [started]

env:
  REPO_URL: https://github.com/Lienol/openwrt
  REPO_BRANCH: dev-19.07
  CONFIG_FILE: .config
  DIY_SH: diy.sh
  FREE_UP_DISK: false
  SSH_ACTIONS: true
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo swapoff /swapfile
        sudo rm -rf /swapfile /etc/apt/sources.list.d/*
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler
        curl -fsSL https://raw.githubusercontent.com/P3TERX/dotfiles/master/.bashrc >> ~/.bashrc
    - name: Free up disk space
      if: env.FREE_UP_DISK == 'true'
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /usr/share/dotnet
        docker rmi `docker images -q`
        sudo -E apt-get -q purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
    - name: Clone source code
      run: git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_SH
        cd openwrt
        ../$DIY_SH
        make defconfig
    - name: SSH connection to Actions
      uses: P3TERX/debugger-action@master
      if: env.SSH_ACTIONS == 'true'

    - name: Download package
      id: package
      run: |
        cd openwrt
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s
        echo "::set-output name=status::success"
    - name: Upload bin directory
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_directory
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "::set-env name=FIRMWARE::$(pwd)"
        echo "::set-output name=status::success"
    - name: Upload firmware directory
      uses: actions/upload-artifact@master
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware
        path: ${{ env.FIRMWARE }}
#+END_SRC
点击build OpenWrt 查看流程

打开build，SSH connection to Actions步骤会出现如图信息，按图标注选择一种方式链接云action

打开界面输入：cd openwrt && make menuconfig，进入配置选择界面，根据你路由器芯片和需要的服务选择（新手参考OpenWrt MenuConfig设置和LuCI插件选项说明）。

完成后按快捷键Ctrl+D或执行exit命令退出，后续编译工作将自动进行，需要2小时左右。编译出错中断会有Email通知。通过日志可以查询出错原因。

编译成功工作流程前出现绿色√，打开流程如下图下载编译好的固件

点击下载：OpenWrt_firmware

GitHub Actions云配置编译了Lean’s OpenWrt 和Lienol‘s OpenWrt 的X86_64固件下载链接供大家测试。

** 一键安装脚本
#+BEGIN_SRC bash
#!/bin/bash

#仅仅搞centos7
if [ ! -e '/etc/redhat-release' ]; then
echo "仅支持centos7"
exit
fi
if  [ -n "$(grep ' 6\.' /etc/redhat-release)" ] ;then
echo "仅支持centos7"
exit
fi

install_docker(){

	yum remove -y docker docker-client docker-client-latest docker-common docker-latest  docker-latest-logrotate docker-logrotate docker-selinux docker-engine-selinux docker-engine
	yum install -y yum-utils device-mapper-persistent-data lvm2
	yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
	yum makecache fast
	yum -y install docker-ce
	systemctl start docker
	systemctl enable docker

}

config_website(){

	cd /usr/src/trojan/web
	wget https://github.com/atrandys/trojan/raw/master/index.zip
	unzip index.zip

}

uninstall_trojan(){
	docker update --restart=no trojan
	docker stop trojan
	docker rm trojan
	rm -rf /usr/src/trojan/
	echo "================="
	echo "    卸载完成"
	echo "================="
}

config_trojan(){

yum -y install  wget unzip vim tcl expect expect-devel
mkdir /usr/src/trojan
mkdir /usr/src/trojan/web
cd /usr/src/trojan
read -p "输入你的VPS绑定的域名：" domain
SUBJECT="/C=US/ST=Mars/L=iTranswarp/O=iTranswarp/OU=iTranswarp/CN=$domain"
echo "============================"
echo " 接下来需要设定密码，输入两次（随意设置，5-10位）"
echo "============================"
openssl genrsa -des3 -out private.key 1024
echo "============================"
echo " 接下来需要输入刚设定的密码"
echo "============================"
openssl req -new -subj $SUBJECT -key private.key -out private.csr
echo "============================"
echo " 再次输入刚设定的密码"
echo "============================"
mv private.key private.or.key
openssl rsa -in private.or.key -out private.key
openssl x509 -req -days 3650 -in private.csr -signkey private.key -out private.crt

cat > /usr/src/trojan/server.conf <<-EOF
{
    "run_type": "server",
    "local_addr": "0.0.0.0",
    "local_port": 443,
    "remote_addr": "127.0.0.1",
    "remote_port": 80,
    "password": [
        "password1"
    ],
    "log_level": 1,
    "ssl": {
        "cert": "/usr/src/trojan/private.crt",
        "key": "/usr/src/trojan/private.key",
        "key_password": "",
        "cipher": "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256",
        "prefer_server_cipher": true,
        "alpn": [
            "http/1.1"
        ],
        "reuse_session": true,
        "session_ticket": false,
        "session_timeout": 600,
        "plain_http_response": "",
        "curves": "",
        "dhparam": ""
    },
    "tcp": {
        "no_delay": true,
        "keep_alive": true,
        "fast_open": false,
        "fast_open_qlen": 20
    },
    "mysql": {
        "enabled": false,
        "server_addr": "127.0.0.1",
        "server_port": 3306,
        "database": "trojan",
        "username": "trojan",
        "password": ""
    }
}
EOF

echo "============================"
echo " 设置验证密码，服务端和客户端使用相同密码"
echo "============================"
read -p "设置密码：" mypassword
sed -i "s/password1/$mypassword/" /usr/src/trojan/server.conf

}

start_docker(){

    sudo firewall-cmd --zone=public --add-port=80/tcp --permanent
	sudo firewall-cmd --zone=public --add-port=443/tcp --permanent
	sudo firewall-cmd --reload
	docker run --name trojan --restart=always -d -p 80:80 -p 443:443 -v /usr/src/trojan:/usr/src/trojan  atrandys/trojan sh -c "/etc/init.d/nginx start && trojan -c /usr/src/trojan/server.conf"
	echo "============================"
	echo "       trojan启动完成"
	echo "============================"
}

start_menu(){
    clear
    echo "========================="
    echo " 介绍：适用于CentOS7"
    echo " 作者：atrandys"
    echo " 网站：www.atrandys.com"
    echo " Youtube：atrandys"
    echo "========================="
    echo "1. 安装Trojan"
    echo "2. 卸载Trojan"
    echo "3. 退出"
    echo
    read -p "请输入数字:" num
    case "$num" in
    	1)
	install_docker
	config_trojan
	config_website
	start_docker
	;;
	2)
	uninstall_trojan
	;;
	3)
	exit 1
	;;
	*)
	clear
	echo "请输入正确数字"
	sleep 5s
	start_menu
	;;
    esac
}

start_menu

#+END_SRC
** Setting proxy in your office and home
[[file:~/Dropbox/config/proxy/proxy_mfa.pac][Setting proxy in mfa]]
[[file:~/Dropbox/config/proxy/proxy_mini.pac][Setting proxy in mac mini]]


如何将两个子网进行连接

- 环境： 办公室
  桌面电脑ip地址：10.10.49.41
  网关ip地址: 10.10.49.1
  无线路由器ip地址: 10.10.49.48

- 无线局域网DHCP 分配

| 主机名                    |     IPv4 地址 | MAC 地址          |
|---------------------------+---------------+-------------------|
| iPhone                    | 192.168.1.108 | d0:03:4b:7b:4d:34 |
|---------------------------+---------------+-------------------|
| SC-202002251426           | 192.168.1.193 | 44:6d:57:eb:13:2f |
|---------------------------+---------------+-------------------|
| GEM-703L-9acf2abc18b68033 | 192.168.1.189 | 64:a6:51:ba:19:49 |
|---------------------------+---------------+-------------------|
| Max-iPhone                | 192.168.1.182 | c0:a6:00:49:7f:4e |
|---------------------------+---------------+-------------------|
| LGwebOSTV                 | 192.168.1.156 | 2c:2b:f9:19:86:c4 |
|---------------------------+---------------+-------------------|

- windows主机上使用管理员权限执行以下命令

这个命令主要的功能是把 =10.10.49.48= 作为网关，访问 =192.168.1.0= 到
=192.16：8.1.254= 的网络主机

[[../attach/subnet_netmask.png][subnet netmask]]

#+BEGIN_SRC sh
 route add 192.168.1.0 mask 255.255.255.0 10.10.49.48
#+END_SRC


#+BEGIN_SRC plantuml :file ../attach/xiaomi_subnet.png
  title subnet
  partition office lan
  (*) --> "Desktop 10.10.49.41"
  note right
    subnet 10.10.49.0/24
  end note
  --> "Xiaomi openwrt router 10.10.49.48"
  --> Route
  note left
    The router is bridged to 192.168.1.1
  end note
  end partition

  partition xiaomi
  --> Route
  --> "Xiaomi openwrt router 192.168.1.1"
  --> "Laptop 192.168.1.189"
  --> (*)
  end partition
#+END_SRC

